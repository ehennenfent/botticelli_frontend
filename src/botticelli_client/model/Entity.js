/**
 * Botticelli DB
 * A database of people/creatures/characters for the game Boticelli.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: ecapstone@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Fact from './Fact';
import Tag from './Tag';

/**
 * The Entity model module.
 * @module model/Entity
 * @version 1.0.0
 */
class Entity {
    /**
     * Constructs a new <code>Entity</code>.
     * @alias module:model/Entity
     */
    constructor() { 
        
        Entity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Entity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Entity} obj Optional instance to populate.
     * @return {module:model/Entity} The populated <code>Entity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Entity();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('given_name')) {
                obj['given_name'] = ApiClient.convertToType(data['given_name'], 'String');
            }
            if (data.hasOwnProperty('nickname')) {
                obj['nickname'] = ApiClient.convertToType(data['nickname'], 'String');
            }
            if (data.hasOwnProperty('surname')) {
                obj['surname'] = ApiClient.convertToType(data['surname'], 'String');
            }
            if (data.hasOwnProperty('alphabetized_as')) {
                obj['alphabetized_as'] = ApiClient.convertToType(data['alphabetized_as'], 'String');
            }
            if (data.hasOwnProperty('is_real')) {
                obj['is_real'] = ApiClient.convertToType(data['is_real'], 'Boolean');
            }
            if (data.hasOwnProperty('is_living')) {
                obj['is_living'] = ApiClient.convertToType(data['is_living'], 'Boolean');
            }
            if (data.hasOwnProperty('birth_year')) {
                obj['birth_year'] = ApiClient.convertToType(data['birth_year'], 'String');
            }
            if (data.hasOwnProperty('gender')) {
                obj['gender'] = ApiClient.convertToType(data['gender'], 'String');
            }
            if (data.hasOwnProperty('score')) {
                obj['score'] = ApiClient.convertToType(data['score'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('wikipedia_url')) {
                obj['wikipedia_url'] = ApiClient.convertToType(data['wikipedia_url'], 'String');
            }
            if (data.hasOwnProperty('image_url')) {
                obj['image_url'] = ApiClient.convertToType(data['image_url'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [Tag]);
            }
            if (data.hasOwnProperty('facts')) {
                obj['facts'] = ApiClient.convertToType(data['facts'], [Fact]);
            }
        }
        return obj;
    }


}

/**
 * @member {Number} id
 */
Entity.prototype['id'] = undefined;

/**
 * @member {Date} updated_at
 */
Entity.prototype['updated_at'] = undefined;

/**
 * @member {Date} created_at
 */
Entity.prototype['created_at'] = undefined;

/**
 * @member {String} given_name
 */
Entity.prototype['given_name'] = undefined;

/**
 * @member {String} nickname
 */
Entity.prototype['nickname'] = undefined;

/**
 * @member {String} surname
 */
Entity.prototype['surname'] = undefined;

/**
 * @member {String} alphabetized_as
 */
Entity.prototype['alphabetized_as'] = undefined;

/**
 * @member {Boolean} is_real
 */
Entity.prototype['is_real'] = undefined;

/**
 * @member {Boolean} is_living
 */
Entity.prototype['is_living'] = undefined;

/**
 * @member {String} birth_year
 */
Entity.prototype['birth_year'] = undefined;

/**
 * @member {module:model/Entity.GenderEnum} gender
 */
Entity.prototype['gender'] = undefined;

/**
 * @member {Number} score
 */
Entity.prototype['score'] = undefined;

/**
 * @member {String} description
 */
Entity.prototype['description'] = undefined;

/**
 * @member {String} wikipedia_url
 */
Entity.prototype['wikipedia_url'] = undefined;

/**
 * @member {String} image_url
 */
Entity.prototype['image_url'] = undefined;

/**
 * @member {Array.<module:model/Tag>} tags
 */
Entity.prototype['tags'] = undefined;

/**
 * @member {Array.<module:model/Fact>} facts
 */
Entity.prototype['facts'] = undefined;





/**
 * Allowed values for the <code>gender</code> property.
 * @enum {String}
 * @readonly
 */
Entity['GenderEnum'] = {

    /**
     * value: "male"
     * @const
     */
    "male": "male",

    /**
     * value: "female"
     * @const
     */
    "female": "female",

    /**
     * value: "analog"
     * @const
     */
    "analog": "analog"
};



export default Entity;

