/**
 * Botticelli DB
 * A database of people/creatures/characters for the game Boticelli.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: ecapstone@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Entity from '../model/Entity';
import Fact from '../model/Fact';

/**
* Fact service.
* @module api/FactApi
* @version 1.0.0
*/
export default class FactApi {

    /**
    * Constructs a new FactApi. 
    * @alias module:api/FactApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addFact operation.
     * @callback module:api/FactApi~addFactCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new fact to the database
     * @param {Number} entityId ID of entity to get facts for
     * @param {module:model/Fact} body Fact object that needs to be added to the database
     * @param {module:api/FactApi~addFactCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addFact(entityId, body, callback) {
      let postBody = body;
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling addFact");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addFact");
      }

      let pathParams = {
        'entity_id': entityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'boticelli_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/entity/{entity_id}/fact', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFact operation.
     * @callback module:api/FactApi~deleteFactCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a fact
     * @param {Number} factId Fact id to delete
     * @param {Number} entityId ID of entity this fact belongs to
     * @param {module:api/FactApi~deleteFactCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFact(factId, entityId, callback) {
      let postBody = null;
      // verify the required parameter 'factId' is set
      if (factId === undefined || factId === null) {
        throw new Error("Missing the required parameter 'factId' when calling deleteFact");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling deleteFact");
      }

      let pathParams = {
        'fact_id': factId,
        'entity_id': entityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'boticelli_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/entity/{entity_id}/fact/{fact_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEntityFacts operation.
     * @callback module:api/FactApi~getEntityFactsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Entity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all entities from the system
     * @param {Number} entityId ID of entity to get facts for
     * @param {module:api/FactApi~getEntityFactsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Entity>}
     */
    getEntityFacts(entityId, callback) {
      let postBody = null;
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling getEntityFacts");
      }

      let pathParams = {
        'entity_id': entityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Entity];
      return this.apiClient.callApi(
        '/entity/{entity_id}/fact', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFactById operation.
     * @callback module:api/FactApi~getFactByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Fact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find fact by ID
     * Returns a single fact
     * @param {Number} factId ID of fact to return
     * @param {Number} entityId ID of entity this fact belongs to
     * @param {module:api/FactApi~getFactByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Fact}
     */
    getFactById(factId, entityId, callback) {
      let postBody = null;
      // verify the required parameter 'factId' is set
      if (factId === undefined || factId === null) {
        throw new Error("Missing the required parameter 'factId' when calling getFactById");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling getFactById");
      }

      let pathParams = {
        'fact_id': factId,
        'entity_id': entityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Fact;
      return this.apiClient.callApi(
        '/entity/{entity_id}/fact/{fact_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFact operation.
     * @callback module:api/FactApi~updateFactCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a fact in the database with form data
     * @param {Number} factId ID of fact that needs to be updated
     * @param {Number} entityId ID of entity this fact belongs to
     * @param {module:model/Fact} fact New data for this fact object
     * @param {module:api/FactApi~updateFactCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateFact(factId, entityId, fact, callback) {
      let postBody = fact;
      // verify the required parameter 'factId' is set
      if (factId === undefined || factId === null) {
        throw new Error("Missing the required parameter 'factId' when calling updateFact");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling updateFact");
      }
      // verify the required parameter 'fact' is set
      if (fact === undefined || fact === null) {
        throw new Error("Missing the required parameter 'fact' when calling updateFact");
      }

      let pathParams = {
        'fact_id': factId,
        'entity_id': entityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'boticelli_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/entity/{entity_id}/fact/{fact_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
