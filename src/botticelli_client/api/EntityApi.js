/**
 * Botticelli DB
 * A database of people/creatures/characters for the game Boticelli.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: ecapstone@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Entity from '../model/Entity';

/**
* Entity service.
* @module api/EntityApi
* @version 1.0.0
*/
export default class EntityApi {

    /**
    * Constructs a new EntityApi. 
    * @alias module:api/EntityApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addEntity operation.
     * @callback module:api/EntityApi~addEntityCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new entity to the database
     * @param {module:model/Entity} body Entity object that needs to be added to the database
     * @param {module:api/EntityApi~addEntityCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addEntity(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addEntity");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'boticelli_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/entity', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEntity operation.
     * @callback module:api/EntityApi~deleteEntityCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a entity
     * @param {Number} entityId Entity id to delete
     * @param {module:api/EntityApi~deleteEntityCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEntity(entityId, callback) {
      let postBody = null;
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling deleteEntity");
      }

      let pathParams = {
        'entity_id': entityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'boticelli_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/entity/{entity_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllEntities operation.
     * @callback module:api/EntityApi~getAllEntitiesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Entity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all entities from the system
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set
     * @param {Number} opts.limit The numbers of items to return
     * @param {Date} opts.updatedSince Only return entities with changes past this date
     * @param {Date} opts.createdSince Only return entities created after this date
     * @param {module:api/EntityApi~getAllEntitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Entity>}
     */
    getAllEntities(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'updated_since': opts['updatedSince'],
        'created_since': opts['createdSince']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Entity];
      return this.apiClient.callApi(
        '/entity', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEntityById operation.
     * @callback module:api/EntityApi~getEntityByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Entity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find entity by ID
     * Returns a single entity
     * @param {Number} entityId ID of entity to return
     * @param {module:api/EntityApi~getEntityByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Entity}
     */
    getEntityById(entityId, callback) {
      let postBody = null;
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling getEntityById");
      }

      let pathParams = {
        'entity_id': entityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Entity;
      return this.apiClient.callApi(
        '/entity/{entity_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchForEntities operation.
     * @callback module:api/EntityApi~searchForEntitiesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Entity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns entities whose name matches the search term
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set
     * @param {Number} opts.limit The numbers of items to return
     * @param {String} opts.q Search term to look for
     * @param {module:api/EntityApi~searchForEntitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Entity>}
     */
    searchForEntities(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Entity];
      return this.apiClient.callApi(
        '/entity/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEntity operation.
     * @callback module:api/EntityApi~updateEntityCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update this entity
     * @param {Number} entityId ID of this entity
     * @param {module:model/Entity} body New data for this entity object
     * @param {module:api/EntityApi~updateEntityCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateEntity(entityId, body, callback) {
      let postBody = body;
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling updateEntity");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateEntity");
      }

      let pathParams = {
        'entity_id': entityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'boticelli_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/entity/{entity_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
